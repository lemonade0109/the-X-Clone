// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model User {
  clerkId  String   @id  @map("_id")
  userName String
  tweets    Tweet[]
  followers   Follow[] @relation("userFollowers")
  following   Follow[] @relation("userFollowing")
  like Like[]
  comment Comment[]
  bookMark Bookmark[]
}

model Follow {
  id       String   @id @default(uuid()) @map("_id")
  follower User     @relation("userFollowers", fields: [followerId], references: [clerkId], onDelete: Cascade)
  followerId String
  following User @relation("userFollowing", fields: [followingId], references: [clerkId], onDelete: Cascade)
  followingId  String
}

model Tweet {
  id       String   @id @default(cuid()) @map("_id")
  content  String
  author     User     @relation(fields: [authorId], references: [clerkId], onDelete: Cascade)
  authorId String
  image String?
  createdAt DateTime @default(now())
  likes    Like[]
  comments Comment[]
  bookMark Bookmark[]

  tweetHashtags TweetHashtag[]
}

model Like {
   id      String @id @default(auto()) @map("_id") @db.ObjectId
  tweet     Tweet     @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  tweetId  String
  user     User     @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  userId  String
  createdAt DateTime @default(now())
}

model Comment {
   id      String @id @default(auto()) @map("_id") @db.ObjectId
  tweet     Tweet     @relation(fields: [tweetId], references: [id], onDelete: Cascade) 
  tweetId  String
 user     User     @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  userId  String
  content  String
  createdAt DateTime @default(now())
}

model Bookmark {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  user User @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  userId String
  tweet     Tweet     @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  tweetId  String
createdAt DateTime @default(now())
}

model Hashtag {
  id String @id @map("_id") 
 tweetHashtags TweetHashtag[]
}

model TweetHashtag {
  id       String   @id @default(uuid()) @map("_id")
  tweet     Tweet     @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  tweetId  String
  hashtag  Hashtag   @relation(fields: [hashtagId], references: [id], onDelete: Cascade)
  hashtagId String
}



// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


